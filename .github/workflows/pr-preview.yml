name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: gh-pages-deployment
  cancel-in-progress: false

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build-nolog

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist/endless-tower/browser
          destination_dir: pr/${{ github.event.number }}/${{ github.event.pull_request.head.sha }}
          keep_files: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const commitSha = context.payload.pull_request.head.sha;
            const shortSha = commitSha.substring(0, 7);
            const previewUrl = `https://${repoOwner}.github.io/${repoName}/pr/${prNumber}/${commitSha}/`;
            
            const comment = `ðŸš€ **Preview deployed!**
            
            **Latest Preview:** ${previewUrl}
            
            Built from commit: ${shortSha}
            
            <details>
            <summary>ðŸ“š All preview versions for this PR</summary>
            
            Each commit gets its own preview URL that persists until the PR is closed:
            - Current: [${shortSha}](${previewUrl})
            
            </details>`;
            
            // Find existing preview comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('ðŸš€ **Preview deployed!**')
            );
            
            if (existingComment) {
              // Parse existing comment to maintain list of preview URLs
              const existingBody = existingComment.body;
              const detailsMatch = existingBody.match(/<details>[\s\S]*?<\/details>/);
              let allPreviews = `- Current: [${shortSha}](${previewUrl})`;
              
              if (detailsMatch) {
                const existingPreviews = detailsMatch[0];
                // Extract existing preview links and add new one
                const linkMatches = existingPreviews.match(/- .*?: \[.*?\]\(.*?\)/g) || [];
                const existingLinks = linkMatches.filter(link => !link.includes('Current:'));
                const previousLinks = existingLinks.map(link => link.replace('- Current:', '- Previous:'));
                
                if (previousLinks.length > 0) {
                  allPreviews = `- Current: [${shortSha}](${previewUrl})\n${previousLinks.join('\n')}`;
                }
              }
              
              const updatedComment = `ðŸš€ **Preview deployed!**
            
            **Latest Preview:** ${previewUrl}
            
            Built from commit: ${shortSha}
            
            <details>
            <summary>ðŸ“š All preview versions for this PR</summary>
            
            Each commit gets its own preview URL that persists until the PR is closed:
            ${allPreviews}
            
            </details>`;
              
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: updatedComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }